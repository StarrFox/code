from binascii import unhexlify

from Crypto.Cipher import AES


aes_key = bytes.fromhex("25 17 1A 2B B0 D5 03 85 C1 70 78 30 76 44 4A 54")
aes_nonce = bytes.fromhex("B8 B0 C3 52 53 C0 98 E9 78 8F BF BB B5 3F 80 0C")

# time for experiments


def hex_to_bytes(hex):
    return unhexlify(hex.replace(" ", ""))

def human_bytes(raw: bytes) -> str:
    return raw.hex(' ').upper()

test_data = [
    # Those two are fine (29 25)
    # c -> s
    hex_to_bytes
    # s -> c
    hex_to_bytes("29 25 A4 8F 78 44 39 EB AE 31 C9 00 58 22 8F 0B 1E 33 F9 9C D4 0A 00 2E E9 5E 2C B3 67 CE 24 7A 0D C1 E1 C8 8C 35 37 8D 1F 27 22 11 6B 48 63 E6 08 89 2B EE A8 18 AD 2F A4 82 E7 5C CE E9 4B 6E C2 68 8E 48 5C C5 5D 9E D0 FF 84 65 4F 02 E7 2C 71 27 CD 27 14 2D 76 F1 BA 94 7D 65 A8 9C 40 A6 BE F2 FF 9E 5E 38 8A 1E 94 87 F0 22 C3 F4 84 D5 E4 0A 79 9C 7B 4C CE 93 16 F4 9B EE 85 D4 39"),
    # here it starts failing
    # c -> s
    hex_to_bytes("0C C2 EB E2 ED E2 1D C1 BE B8 63 7B 43"),
    # s -> c
    hex_to_bytes("3D 2C 9E 81 0F 86 8E B5 4B 2E 93 D1 7A B9 6F 24 0A B1 DE E7 BF"),

]


def decrypt(raw: bytes):
    aes = AES.new(aes_key, AES.MODE_GCM, nonce=aes_nonce)
    return aes.decrypt(raw)

# for data in test_data:
#     assert decrypt(data)[:2] == b"\r\xF0"

print(decrypt(test_data[0][:2]))
assert decrypt(test_data[0][:2]) == b"\r\xF0"
